# -*- coding: utf-8 -*-
"""IMAGE PROCESSING.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iO7960OkFXW1se8fKGIUbKqnf7T84RJ4
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib import image as mpimg
from google.colab import files
from PIL import Image

# Step 3: Upload the JPG file in Google Colab
uploaded = files.upload()

# Step 4: Choose the file name from the uploaded files
file_name = next(iter(uploaded))

# Step 5: Load the image using PIL
img = Image.open(file_name)
img_array = np.array(img)

# Step 6: Print the shape of the array
print("Shape of the array:", img_array.shape)
print("Number of dimensions:", img_array.ndim)
print("Number of integers stored:", img_array.size)

# Step 7: Display the original image
plt.imshow(img_array)
plt.title('Original Image')
plt.axis('off')
plt.show()

# Step 8: Subtract each item from 1
new_image = 1 - img_array

# Step 9: Display the new image
plt.imshow(new_image)
plt.title('New Image')
plt.axis('off')
plt.show()

# Step 10: Print a single item from img_array and new_image
print("Original image value:", img_array[0, 0, 0])
print("New image value:", new_image[0, 0, 0])

# Step 11: Convert to grayscale using weighted sum
weights = np.array([0.2989, 0.5870, 0.1140])
gray_image = np.dot(img_array, weights)

# Step 12: Display the grayscale image
plt.imshow(gray_image, cmap='gray')
plt.title('Grayscale Image')
plt.axis('off')
plt.show()

# Step 13: Create a negative image of the grayscale image
negative_image = 1 - gray_image
plt.imshow(negative_image, cmap='gray')
plt.title('Negative Grayscale Image')
plt.axis('off')
plt.show()

# Step 14: Crop the grayscale image (example cropping, adjust as needed)
cropped_image = gray_image[100:400, 200:500]

# Step 15: Print the shape of the cropped array
print("Shape of cropped array:", cropped_image.shape)

# Step 16: Display the cropped image
plt.imshow(cropped_image, cmap='gray')
plt.title('Cropped Grayscale Image')
plt.axis('off')
plt.show()

"""# Summary
In this lab, you used NumPy for efficient image processing tasks. Key steps included loading and inspecting images, displaying them using Matplotlib, performing element-wise operations effortlessly, handling data types like `uint8`, converting color images to grayscale, creating negative images, and exploring basic image manipulation techniques such as cropping. Overall, the lab demonstrated the power of NumPy in simplifying complex numerical operations and array manipulations in the context of image processing.
"""